// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrganicNutritionRecipes.Data;

namespace OrganicNutritionRecipes.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220129064048_initialMigratios_4")]
    partial class initialMigratios_4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Data.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RecipeText")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RecipeType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Data.RecipeTag", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("RecipeId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RecipeTags");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Data.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Measure")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NutrientType")
                        .HasColumnName("nutrient_type")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nutrient_type")
                        .IsRequired()
                        .HasColumnName("nutrient_type1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Nutrients");

                    b.HasDiscriminator<string>("nutrient_type").HasValue("nutrient_base");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.NutritionFacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CaffeineId")
                        .HasColumnType("int");

                    b.Property<int>("CarbohydrateId")
                        .HasColumnType("int");

                    b.Property<int>("CholesterolId")
                        .HasColumnType("int");

                    b.Property<int>("PolyUnsaturatedFatId")
                        .HasColumnType("int");

                    b.Property<int>("ProteinId")
                        .HasColumnType("int");

                    b.Property<int>("SaturatedFatId")
                        .HasColumnType("int");

                    b.Property<int>("TotalDietaryFiberId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSugarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaffeineId")
                        .IsUnique();

                    b.HasIndex("CarbohydrateId")
                        .IsUnique();

                    b.HasIndex("CholesterolId")
                        .IsUnique();

                    b.HasIndex("PolyUnsaturatedFatId")
                        .IsUnique();

                    b.HasIndex("ProteinId")
                        .IsUnique();

                    b.HasIndex("TotalDietaryFiberId")
                        .IsUnique();

                    b.HasIndex("TotalSugarId")
                        .IsUnique();

                    b.ToTable("NutritionFacts");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.Produce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Produces");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.ProduceNutrients", b =>
                {
                    b.Property<int>("ProduceId")
                        .HasColumnType("int");

                    b.Property<int>("NutrientId")
                        .HasColumnType("int");

                    b.HasKey("ProduceId", "NutrientId");

                    b.HasIndex("NutrientId");

                    b.ToTable("ProduceNutrients");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.Caffeine", b =>
                {
                    b.HasBaseType("OrganicNutritionRecipes.Models.Nutrient");

                    b.Property<double>("CaffeinePerMeasure")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue("caffeine");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.Carbohydrate", b =>
                {
                    b.HasBaseType("OrganicNutritionRecipes.Models.Nutrient");

                    b.Property<double>("CarbohydrateGPerMeasure")
                        .HasColumnType("double");

                    b.Property<int>("NutritionFactsId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("carbohydrate");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.Cholesterol", b =>
                {
                    b.HasBaseType("OrganicNutritionRecipes.Models.Nutrient");

                    b.Property<double>("CholesterolPerMeasure")
                        .HasColumnType("double");

                    b.Property<int>("NutritionFactsId")
                        .HasColumnName("Cholesterol_NutritionFactsId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("cholesterol");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.PolyUnsaturatedFat", b =>
                {
                    b.HasBaseType("OrganicNutritionRecipes.Models.Nutrient");

                    b.Property<int>("NutritionFactsId")
                        .HasColumnName("PolyUnsaturatedFat_NutritionFactsId")
                        .HasColumnType("int");

                    b.Property<string>("PolyUnsaturatedFatPerMeasure")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("polyunsaturatedfat");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.Protein", b =>
                {
                    b.HasBaseType("OrganicNutritionRecipes.Models.Nutrient");

                    b.Property<int>("NutritionFactsId")
                        .HasColumnName("Protein_NutritionFactsId")
                        .HasColumnType("int");

                    b.Property<double>("ProteinGPerMeasure")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue("protein");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.SaturatedFat", b =>
                {
                    b.HasBaseType("OrganicNutritionRecipes.Models.Nutrient");

                    b.Property<int>("NutritionFactsId")
                        .HasColumnName("SaturatedFat_NutritionFactsId")
                        .HasColumnType("int");

                    b.Property<double>("SaturatedFatPerMeasure")
                        .HasColumnType("double");

                    b.HasIndex("NutritionFactsId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("saturatedfat");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.TotalDietaryFiber", b =>
                {
                    b.HasBaseType("OrganicNutritionRecipes.Models.Nutrient");

                    b.Property<int>("NutritionFactsId")
                        .HasColumnName("TotalDietaryFiber_NutritionFactsId")
                        .HasColumnType("int");

                    b.Property<double>("TotalDietaryGPer100G")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue("totaldietaryfiber");
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.TotalSugar", b =>
                {
                    b.HasBaseType("OrganicNutritionRecipes.Models.Nutrient");

                    b.Property<int>("NutritionFactsId")
                        .HasColumnName("TotalSugar_NutritionFactsId")
                        .HasColumnType("int");

                    b.Property<double>("SugarGPerMeasure")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue("totalsugar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Data.RecipeTag", b =>
                {
                    b.HasOne("OrganicNutritionRecipes.Data.Recipe", "Recipe")
                        .WithMany("RecipeTags")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicNutritionRecipes.Data.Tag", "Tag")
                        .WithMany("RecipeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.NutritionFacts", b =>
                {
                    b.HasOne("OrganicNutritionRecipes.Models.Caffeine", "Caffeine")
                        .WithOne("NutritionFacts")
                        .HasForeignKey("OrganicNutritionRecipes.Models.NutritionFacts", "CaffeineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicNutritionRecipes.Models.Carbohydrate", "Carbohydrate")
                        .WithOne("NutritionFacts")
                        .HasForeignKey("OrganicNutritionRecipes.Models.NutritionFacts", "CarbohydrateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicNutritionRecipes.Models.Cholesterol", "Cholesterol")
                        .WithOne("NutritionFacts")
                        .HasForeignKey("OrganicNutritionRecipes.Models.NutritionFacts", "CholesterolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicNutritionRecipes.Models.PolyUnsaturatedFat", "PolyUnsaturatedFat")
                        .WithOne("NutritionFacts")
                        .HasForeignKey("OrganicNutritionRecipes.Models.NutritionFacts", "PolyUnsaturatedFatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicNutritionRecipes.Models.Protein", "Protein")
                        .WithOne("NutritionFacts")
                        .HasForeignKey("OrganicNutritionRecipes.Models.NutritionFacts", "ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicNutritionRecipes.Models.TotalDietaryFiber", "TotalDietaryFiber")
                        .WithOne("NutritionFacts")
                        .HasForeignKey("OrganicNutritionRecipes.Models.NutritionFacts", "TotalDietaryFiberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicNutritionRecipes.Models.TotalSugar", "TotalSugar")
                        .WithOne("NutritionFacts")
                        .HasForeignKey("OrganicNutritionRecipes.Models.NutritionFacts", "TotalSugarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.ProduceNutrients", b =>
                {
                    b.HasOne("OrganicNutritionRecipes.Models.Nutrient", "Nutrient")
                        .WithMany()
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicNutritionRecipes.Models.Produce", "produce")
                        .WithMany("ProduceNutrients")
                        .HasForeignKey("ProduceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicNutritionRecipes.Models.SaturatedFat", b =>
                {
                    b.HasOne("OrganicNutritionRecipes.Models.NutritionFacts", "NutritionFacts")
                        .WithOne("SaturatedFat")
                        .HasForeignKey("OrganicNutritionRecipes.Models.SaturatedFat", "NutritionFactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
