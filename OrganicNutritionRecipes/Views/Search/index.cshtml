@*@model OrganicNutritionRecipes.Data.Recipe*@
<div class="container body-content">

    <h1>@ViewBag.title</h1>

    <form action="/search/searchbyrecipe" method="post">
        <h3>Search Recipes By:</h3>

        <p>
            @*<span>
                    <input class="searchBy" type="radio" name="searchType" id="Keyword" value="Keyword" disabled />
                    <label for="Keyword">Keyword(E.g. Cheese Burgers) TODO Not Yet Implemented</label>
                </span>
                <br />*@
            <span>
                <input class="searchBy" type="radio" name="searchType" id="Ingredient" value="Ingredient" checked="" />
                <label for="Ingredient">Ingredient (E.g. Rice, Spinach, Egg, Chicken)</label>
            </span>
            <br />
            <span>
                <input class="searchBy" type="radio" name="searchType" id="RecipeType" value="Recipe Type" />
                <label for="Type">Type (E.g. Sandwiches, Salads, Soups)</label>
            </span>
        </p>
        <div id="searchIngredientBox">
            <label for="searchTerm">Search Recipes by Ingredient:</label>
            <div id="inputFormRow">
                <div class="input-group mb-3" style="width:25%">
                    <input type="text" class="form-control" aria-label="Search Ingredients" name="searchIngredients" id="searchByIngredients">
                    <button id="addMore" class="btn btn-outline-secondary" type="button"><i class="fa fa-plus" aria-hidden="true"></i></button>
                </div>
                <div id="newRow"></div>
                @*<input class="form-control hide" type="text" name="searchTerm" id="searchTerm" />*@
            </div>
            
        </div>
        <div id="searchRecipeTypeBox">
            <div class="input-group mb-3">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="checkbox" value="Sandwiches" name="SelectedRecipeTypes" aria-label="Checkbox for following text input">
                </div>
                <input type="text" class="form-control" readonly value="Sandwiches" aria-label="Text input with checkbox">
            </div>
            <div class="input-group mb-3">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="checkbox" value="Salads" name="SelectedRecipeTypes" aria-label="Checkbox for following text input">
                </div>
                <input type="text" class="form-control" readonly value="Salads" aria-label="Text input with checkbox">
            </div>
            <div class="input-group mb-3">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="checkbox" value="Soups" name="SelectedRecipeTypes" aria-label="Checkbox for following text input">
                </div>
                <input type="text" class="form-control" readonly value="Soups" aria-label="Text input with checkbox">
            </div>
        </div>
        <input type="submit" value="Search Recipes" />
    </form>
    <br />
    <hr />
    <br />
    <hr />

    @if (ViewBag.produces != null)
    {
        <table>
            @foreach (var produce in ViewBag.produces)
            {
                <tr>
                    <td>
                        <div>
                            <span>
                                <input type="checkbox" name="searchType" id="@produce.produce.Id" value="@produce.produce.Name" />
                                <label for="@produce.produce.Id">@produce.produce.Name</label>
                            </span>

                        </div>

                    </td>
                </tr>
            }
        </table>
    }

    @if (ViewBag.seachedRecipes != null)
    {
        <h4 class="card-title">Recipes</h4>
        int counter = 1;
        <div class="accordion" id="accordionPanelsStayOpenExample">
            @foreach (var recipe in ViewBag.seachedRecipes)
            {
                <div class="accordion-item">
                    <h2 class="accordion-header" id="panelsStayOpen-heading@(counter)">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapse@(counter)" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
                            Recipe - @recipe.RecipeName (@recipe.RecipeType)
                        </button>
                    </h2>
                    <div id="panelsStayOpen-collapse@(counter)" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-heading@(counter)">
                        <div class="accordion-body">
                            @*<h5 class="card-title">Recipe Type - @recipe.RecipeType</h5>*@
                            <pre class="card-text">@recipe.RecipeText</pre>
                            <ul id="tagList" class="list-group">
                                @foreach (var item in recipe.RecipeTags)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center" data-tag-id="@item.TagId.ToString("D")">
                                        <span>@(item.Tag.Name)</span>
                                        <button class="btn btn-outline-danger" onclick="viewNutritionFact('@item.Tag.Name')"><i class="fas fa-burn"></i></button>
                                    </li>

                                }
                            </ul>
                        </div>
                    </div>
                </div>
                counter++;
            }
        </div>
    }
    <hr />
</div>
    <!--Open Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalTitle">Modal title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    ...
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                </div>
            </div>
        </div>
    </div>

    @section scripts{
        <script type="text/javascript">$(".searchBy").click(function () {
        if ($("input[name=searchType]:checked").val() == "Ingredient") {
            $("#searchIngredientBox").attr("style", "display:block");
            $("#searchRecipeTypeBox").attr("style", "display:none");
        }
        else if ($("input[name=searchType]:checked").val() == "Recipe Type") {
            $("#searchIngredientBox").attr("style", "display:none");
            $("#searchRecipeTypeBox").attr("style", "display:block");

        }
    });

    $(document).ready(function () {
        console.log("ready!");
        $("#searchRecipeTypeBox").attr("style", "display:none");
    });

    $("#addMore").click(function () {
        var html = '';
        html += '<div id="inputFormRow" style="width:25%">';
        html += '<div class="input-group mb-3">';
        html += '<input type="text" name="searchIngredients" class="form-control m-input" readonly value="' + document.getElementById('searchByIngredients').value + '" autocomplete="off">';
        html += '<div class="input-group-append">';
        html += '<button id="removeRow" type="button" class="btn btn-danger">Remove</button>';
        html += '</div>';
        html += '</div>';

        if (document.getElementById('searchByIngredients').value) {
            $('#newRow').append(html);
            document.getElementById('searchByIngredients').value =''
        }
    });

    // remove row
    $(document).on('click', '#removeRow', function () {
        $(this).closest('#inputFormRow').remove();
    });

    $('#exampleModal2').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget); // Button that triggered the modal
        var modal = $(this);
        var title = button.data('title'); alert(title);
        modal.find('.modal-title').text(title)
    });

    async function viewNutritionFact(tagName) {
        const rawResponse = await fetch('/search/viewHealthFact', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(tagName)
        });
        const content = await rawResponse.json();

        if (content.success) {
            if (content.healthyFact) {
                var fact = content.healthyFact;
                var myModal = new bootstrap.Modal(document.getElementById('exampleModal'), { focus: true, backdrop: true })
                myModal.show();
                document.getElementById('exampleModal').querySelector('.modal-title').innerHTML = "Nutrition Fact for "+tagName;
                document.getElementById('exampleModal').querySelector('.modal-body').innerHTML = `<table>
                        <tr><th> Name </th><th> Value </th></tr>
                        <tr><td> Cholesterol </td><td>${fact.cholesterol}</td></tr>
                        <tr><td> Carbohydrate </td><td>${fact.carbohydrate}</td></tr>
                        <tr><td> Protein </td><td>${fact.protein}</td></tr>
                        <tr><td> Total Sugar </td><td>${fact.totalSugar}</td></tr>
                        <tr><td> SaturatedFat </td><td>${fact.saturatedFat}</td></tr>
                        </table> `;
            }
            
        }
        else {
            //TODO Error handling for show message to user
        }
    }

            const fetchTimeout = (url, ms, { signal, ...options } = {}) => {
    const controller = new AbortController();
    const promise = fetch(url, { signal: controller.signal, ...options });
    if (signal) signal.addEventListener("abort", () => controller.abort());
    const timeout = setTimeout(() => controller.abort(), ms);
    return promise.finally(() => clearTimeout(timeout));
};
     async function my_async_fn(url, requestOptions) {
        var fatSecretRestUrl = "https://platform.fatsecret.com/rest/server.api";

        var d = new Date();
         var sharedSecret = "f6c771a71ec844ea9ad23cca1c80d50a";
         var consumerKey = "6314f908f9cf480facc9c250916ff476";

        var baseUrl = "https://platform.fatsecret.com/rest/server.api?";
        var parameters = "format=json&method=foods.search&oauth_consumer_key=" + consumerKey
            + "&oauth_nonce=123&oauth_signature_method=HMAC-SHA1&oauth_timestamp="
            + Date.now() + "&oauth_version=1.0&search_expression=banana";
         var pp = "search_expression=banana&method=foods.search&format=json&oauth_consumer_key=6314f908f9cf480facc9c250916ff476&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1643508886960&oauth_nonce=123&oauth_version=1.0";
         var signatureBaseString = "GET&" + encodeURIComponent(baseUrl) + "&" + encodeURIComponent(pp);
         console.log("signature base string: " + signatureBaseString);
         var oauthSignature = CryptoJS.HmacSHA1(signatureBaseString, sharedSecret);
        var oauthSignature64 = encodeURIComponent(CryptoJS.enc.Base64.stringify(oauthSignature));
         console.log("hash in 64: " + oauthSignature64);
         console.log("hash in 64: " + encodeURIComponent(CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA1(encodeURIComponent(baseUrl+pp), sharedSecret))));

         var testUrl = baseUrl + "format=json&method=foods.search&oauth_consumer_key=6314f908f9cf480facc9c250916ff476&oauth_nonce=123&oauth_signature="
             + oauthSignature64 + "&oauth_signature_method=HMAC-SHA1&oauth_timestamp="
             + Date.now() + "&oauth_version=1.0&search_expression=banana";
        console.log("final URL: " + testUrl);
         console.log("old URL: " + url);

        @*var request = $http({
            method: "POST",
            url: testUrl
        });*@
         return fetch(testUrl, requestOptions).then(response => {
            console.log(response); // Logs the response
            return response;
        }).catch(error => console.log('error', error));
            };

            async function viewNutritionFacts(tagName) {
                console.log("Suhas");
                console.log(test());
            }
              function test()
    {
                var METHOD = 'foods.search';
                var OAUTH_TIMESTAMP = new Date().getTime();
                var OAUTH_NONCE = '' + new Date().getTime();
                var PAGE_NUMBER = null;
                var MAX_RESULTS = 1;
                var RECIPE_TYPE = null;
                var SEARCH_EXPRESSION = 'banana'
                var SHARED_SECRET = 'f6c771a71ec844ea9ad23cca1c80d50a';
                var OAUTH_CONSUMER_KEY = '6314f908f9cf480facc9c250916ff476';
                var APPLICATION = 'MyApp';

                var REQUEST_URL = 'https://platform.fatsecret.com/rest/server.api';
                var REQUEST_METHOD = 'POST';

                var OAUTH_SIGNATURE_METHOD = 'HMAC-SHA1';
                var OAUTH_VERSION = '1.0';

                // Create a Signature Base String
                var REQUEST_URL_ENCODED = encodeURIComponent('https://platform.fatsecret.com/rest/server.api');
                var NORMALISED_PARAMETERS = 'format=json';
                if (MAX_RESULTS != null)
                    NORMALISED_PARAMETERS += '&max_results=1';
                NORMALISED_PARAMETERS += '&method=' + METHOD;
                NORMALISED_PARAMETERS += '&oauth_consumer_key=6314f908f9cf480facc9c250916ff476';
                NORMALISED_PARAMETERS += '&oauth_nonce=' + OAUTH_NONCE;
                NORMALISED_PARAMETERS += '&oauth_signature_method=' + OAUTH_SIGNATURE_METHOD;
                NORMALISED_PARAMETERS += '&oauth_timestamp=' + OAUTH_TIMESTAMP;
                NORMALISED_PARAMETERS += '&oauth_version=1.0';
                if (PAGE_NUMBER != null)
                    NORMALISED_PARAMETERS += '&page_number=' + PAGE_NUMBER;
                if (RECIPE_TYPE != null)
                    NORMALISED_PARAMETERS += '&recipe_type=' + RECIPE_TYPE;
                if (SEARCH_EXPRESSION != null)
                    NORMALISED_PARAMETERS += '&search_expression=' + SEARCH_EXPRESSION;


                NORMALISED_PARAMETERS_ENCODED = encodeURIComponent(NORMALISED_PARAMETERS);

                var BASE_STRING = `${REQUEST_METHOD}&${REQUEST_URL_ENCODED}&${NORMALISED_PARAMETERS_ENCODED}`;

                // Calculate the Signature value
                SHARED_SECRET += '&'; // no user, & needed

                var OAUTH_SIGNATURE = CryptoJS.HmacSHA1(BASE_STRING, SHARED_SECRET);
                var OAUTH_SIGNATURE_BASE64 = CryptoJS.enc.Base64.stringify(OAUTH_SIGNATURE);
                var OAUTH_SIGNATURE_BASE64_ENCODED = encodeURIComponent(OAUTH_SIGNATURE_BASE64);
                var OAUTH_REQUEST_URL = `${REQUEST_URL}?${NORMALISED_PARAMETERS}&oauth_signature=${OAUTH_SIGNATURE_BASE64_ENCODED}`;



                 $.ajax({
                     headers:{ "Access-Control-Allow-Origin":"*" ,"Access-Control-Request-Headers": "x-requested-with", "accept":"application/json"},
                     crossDomain: true,
                     type: "POST", //rest Type
            //dataType: 'jsonp', //mispelled
            url: OAUTH_REQUEST_URL,
            async: false,
            //contentType: "application/json; charset=utf-8",
            success: function (msg) {
                console.log(msg);
            }
 });


                //const promise = await fetch(OAUTH_REQUEST_URL, requestOptions).then((resolve, reject) => setTimeout(resolve, 10000, 'foo')).then((response) => response.json())

                 const controller = new AbortController()

                 // 5 second timeout:
const timeoutId = setTimeout(() => controller.abort(), 10000);
                 // Send the Request
                var requestOptions = {
                    method: 'POST',
                    headers: { "Access-Control-Allow-Origin": "https://127.0.0.1:5001" , "Content-Type": "application/json", "accept":"application/json"},
                    redirect: 'follow',
                    mode: "no-cors",
                    signal: controller.signal
                };


//document.querySelector("button.cancel").addEventListener("click", () => controller.abort());
 @*fetchTimeout(OAUTH_REQUEST_URL, 10000, { signal: controller.signal,mode: "no-cors",method:'POST' })
    .then(response => {var ss=  response.json(); console.log(ss);})
    .then((responseData) => {
                        console.log('responseData');
                        console.log(responseData);
                        alert(responseData);
                                return responseData;
                    })
    .catch(error => {
        if (error.name === "AbortError") {
            // fetch aborted either due to timeout or due to user clicking the cancel button
        } else {
            // network error or json parsing error
        }
    });*@

fetch(OAUTH_REQUEST_URL, requestOptions).then(
    response => response.json())
                    .then((responseData) => {
                        console.log('responseData');
                        console.log(responseData);
                        alert(responseData);
                                return responseData;
                    });


                @*return fetch(OAUTH_REQUEST_URL, requestOptions)
                    .then((response) => response.json())
                    .then((responseData) => {
                        console.log('responseData');
                        console.log(responseData);
                        alert(responseData);
                                return responseData;
                    });
                console.log(dd);*@
            }


        async function viewNutritionFacts1(tagName) {
    @*var myHeaders = new Headers();
        myHeaders.append("Cookie", "AWSALB=CQr8m1fYZOn3qEn/3GObVUaKnl8kdFfpBKYdnpJEYvjQHJ7V9yx3l8D8G6VyfvrOGLxLnQGAYzaxs9kkstXlWgXT/j0PKbX9vQWXWV29q7tFcHBn3snxJenXiClX; AWSALBCORS=CQr8m1fYZOn3qEn/3GObVUaKnl8kdFfpBKYdnpJEYvjQHJ7V9yx3l8D8G6VyfvrOGLxLnQGAYzaxs9kkstXlWgXT/j0PKbX9vQWXWV29q7tFcHBn3snxJenXiClX");
        myHeaders.append("Access-Control-Allow-Origin", true);
        var requestOptions = {
            method: 'GET',
            headers: { "Access-Control-Allow-Origin": 'http://localhost:5001'},
            redirect: 'follow',
            mode: "no-cors"
        };

        const rawResponse = '';


        console.log(my_async_fn("https://platform.fatsecret.com/rest/server.api?search_expression=Orange&method=foods.search&format=json&oauth_consumer_key=6314f908f9cf480facc9c250916ff476&oauth_signature_method=HMAC-SHA1&oauth_timestamp="+Date.now()+"&oauth_nonce=wBlm9zxcBeX&oauth_version=1.0&oauth_signature=%2Fg%2BQv%2Bewd4EB%2F5qPzPBZut7OC0E%3D", requestOptions));
        const content = await rawResponse.json();
        const content1 = await rawResponse.text();*@

        console.log('heek');
        @*if (content.success) {
            var myModal = new bootstrap.Modal(document.getElementById('exampleModal'), { focus: true, backdrop:true})
            myModal.show();
            document.getElementById('exampleModal').querySelector('.modal-title').innerHTML = tagName;
            document.getElementById('exampleModal').querySelector('.modal-body').innerHTML = `<table>
                        <tr><td>Protein - 10% </td></tr>
                        <tr><td>Fats - 10% </td></tr>
                        <tr><td>Sugar - 10% </td></tr>
                        <tr><td>Saturated Fats - 20% </td></tr>
                        <tr><td>Carbohydrates - 50% </td></tr>
                        </table>`;
        }
        else {
            //TODO Error handling for show message to user
        }*@
    }</script>
    }
